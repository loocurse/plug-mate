{"version":3,"sources":["RemoteToggleButton.js","RemoteIcon.js","RemoteBox.js","index.js"],"names":["RemoteToggleButton","Component","[object Object]","args","super","this","state","checked","props","defaultChecked","onChange","e","setState","target","render","react_default","a","createElement","className","Small","type","name","Name","id","currentValue","disabled","htmlFor","data-yes","Text","data-no","defaultProps","RemoteIcon","React","constructor","plugLoad","current","defaultState","imageSource","toString","class","src","alt","RemoteBox","formatted","toggleButtonId","style","textAlign","fontFamily","src_RemoteIcon_0","src_RemoteToggleButton_0","ReactDOM","StrictMode","Fragment","float","marginLeft","marginBottom","margin","width","src_RemoteBox_0","document","getElementById","master","desktop","desktopImage","childNodes","desktopRing","monitor","monitorImage","monitorRing","laptop","laptopImage","laptopRing","tasklamp","tasklampImage","tasklampRing","fan","fanImage","fanRing","Main","onclick","window","confirm","classList","remove","add","unmountComponentAtNode"],"mappings":"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","file":"static/js/main.584da463.chunk.js","sourcesContent":["// This is the component for the toggle button.\n// id is required for the component to function\n\nimport React, { Component } from \"react\";\nimport \"./RemoteToggleButton.css\";\nimport PropTypes from \"prop-types\";\n\n\nclass RemoteToggleButton extends Component {\n  state = {\n    checked: this.props.defaultChecked // whether toggle button is checked/ON (true) or not checked/OFF (false)\n  };\n  onChange = e => {\n    this.setState({\n      checked: e.target.checked\n    });\n    if (typeof this.props.onChange === \"function\") this.props.onChange();\n  };\n  render() {\n    return (\n      <div\n        className={\"toggle-switch\" + (this.props.Small ? \" small-switch\" : \"\")}\n      >\n        <input\n          type=\"checkbox\"\n          name={this.props.Name}\n          className=\"toggle-switch-checkbox\"\n          id={this.props.id}\n          checked={this.props.currentValue}\n          defaultChecked={this.props.defaultChecked}\n          onChange={this.onChange}\n          disabled={this.props.disabled}\n        />\n        {this.props.id ? (\n          <label className=\"toggle-switch-label\" htmlFor={this.props.id}>\n            <span\n              className={\n                this.props.disabled\n                  ? \"toggle-switch-inner toggle-switch-disabled\"\n                  : \"toggle-switch-inner\"\n              }\n              data-yes={this.props.Text[0]}\n              data-no={this.props.Text[1]}\n            />\n            <span\n              className={\n                this.props.disabled\n                  ? \"toggle-switch-switch toggle-switch-disabled\"\n                  : \"toggle-switch-switch\"\n              }\n            />\n          </label>\n        ) : null}\n      </div>\n    );\n  }\n  // Set text for rendering.\n  static defaultProps = {\n    Text: [\"ON\", \"OFF\"]\n  };\n}\n\nRemoteToggleButton.propTypes = {\n  id: PropTypes.string.isRequired,\n  Text: PropTypes.string.isRequired,\n  Name: PropTypes.string,\n  onChange: PropTypes.func,\n  defaultChecked: PropTypes.bool,\n  Small: PropTypes.bool,\n  currentValue: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\nexport default RemoteToggleButton;\n","// This is the component for the plug load icon and name.\n\nimport React from 'react';\nimport './RemoteIcon.css';\n\n\nclass RemoteIcon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plugLoad: this.props.current, // the current plug load\n      defaultState: this.props.defaultState, // the default state (ON or OFF)\n      imageSource: \"/static/Images/\" + this.props.current.toString() + \" \" + this.props.defaultState.toString() + \".png\", // path to image\n      id: this.props.current.toString() + \"IconRemote\" // id given to component\n    }\n  }\n  render() {\n    // Make some formatting changes when the plug load chosen is task lamp\n    if (this.state.plugLoad === \"TaskLamp\") {\n      this.state.imageSource = \"/static/Images/Task Lamp \" + this.state.defaultState + \".png\"\n    }\n\n    return (\n      <div id={this.state.id}>\n        <div class=\"greenRemote\">\n          <div class = \"whiteRemote\">\n            <img class=\"RemotePlugLoadIcon\" src={this.state.imageSource} alt=\"Icon\"/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RemoteIcon;\n","// This is the final component for each plug load, containing the plug load icon and name and the toggle switch\n\nimport React from 'react';\nimport RemoteToggleButton from './RemoteToggleButton';\nimport './RemoteBox.css';\nimport RemoteIcon from './RemoteIcon';\n\n\nclass RemoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.id.toString() + \"BoxRemote\", // id given to component\n      current: this.props.id, // name of plug load\n      formatted: \"\", // initialization of string for formatting of \"TaskLamp\"\n      toggleButtonId: this.props.id.toString() + \"ToggleRemote\"\n    }\n  }\n  render() {\n    // Make some formatting changes when the plug load chosen is task lamp\n    if (this.state.current === \"TaskLamp\") {\n      this.state.formatted = \"Task Lamp\"\n    } else {\n      this.state.formatted = this.state.current\n    }\n\n    return(\n      <div class=\"containerRemote\" id={this.state.id}>\n        <p style={{textAlign: \"center\", fontFamily: \"Helvetica\"}}> {this.state.formatted} </p>\n        <RemoteIcon current={this.state.current} defaultState=\"ON\" />\n        <br />\n        <RemoteToggleButton id={this.state.toggleButtonId} defaultChecked=\"true\"  />\n      </div>\n    )\n  }\n}\n\nexport default RemoteBox;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RemoteToggleButton from './RemoteToggleButton';\nimport RemoteBox from './RemoteBox';\nimport './index.css'\n\n\n\n// Remote Control\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <div style={{float:\"right\"}}>\n        <p style={{marginLeft: \"50px\", marginBottom:\"5px\"}}> Master </p>\n        <RemoteToggleButton id=\"master\" defaultChecked=\"true\" />\n      </div>\n      <br />\n      <br />\n\n      <div className={'col-xlg-6'}>\n        <div style={{margin:\"auto\", width:\"900px\"}}>\n          <RemoteBox id=\"Desktop\" />\n          <RemoteBox id=\"Monitor\"/>\n          <RemoteBox id=\"Laptop\" />\n          <RemoteBox id=\"TaskLamp\"/>\n          <RemoteBox id=\"Fan\" />\n        </div>\n      </div>\n    </>\n  </React.StrictMode>,\n  document.getElementById('remote-control')\n);\n\n// Define necessary variables\nvar master = document.getElementById(\"master\"); // Master toggle button\nvar desktop = document.getElementById(\"DesktopBoxRemote\"); // Final component for desktop\nvar desktopImage = document.getElementById(\"DesktopIconRemote\").childNodes[0].childNodes[0].childNodes[0]; // Icon image for desktop (to be changed between green and grey)\nvar desktopRing = document.getElementById(\"DesktopIconRemote\").childNodes[0]; // Outer ring for desktop (to be changed between green and grey)\nvar monitor = document.getElementById(\"MonitorBoxRemote\"); // Final component for monitor\nvar monitorImage = document.getElementById(\"MonitorIconRemote\").childNodes[0].childNodes[0].childNodes[0]; // Icon image for monitor (to be changed between green and grey)\nvar monitorRing = document.getElementById(\"MonitorIconRemote\").childNodes[0]; // Outer ring for monitor (to be changed between green and grey)\nvar laptop = document.getElementById(\"LaptopBoxRemote\"); // Final component for laptop\nvar laptopImage = document.getElementById(\"LaptopIconRemote\").childNodes[0].childNodes[0].childNodes[0]; // Icon image for laptop (to be changed between green and grey)\nvar laptopRing = document.getElementById(\"LaptopIconRemote\").childNodes[0]; // Outer ring for laptop (to be changed between green and grey)\nvar tasklamp = document.getElementById(\"TaskLampBoxRemote\"); // Final component for task lamp\nvar tasklampImage = document.getElementById(\"TaskLampIconRemote\").childNodes[0].childNodes[0].childNodes[0]; // Icon image for task lamp (to be changed between green and grey)\nvar tasklampRing = document.getElementById(\"TaskLampIconRemote\").childNodes[0]; // Outer ring for task lamp (to be changed between green and grey)\nvar fan = document.getElementById(\"FanBoxRemote\"); // Final component for fan\nvar fanImage = document.getElementById(\"FanIconRemote\").childNodes[0].childNodes[0].childNodes[0]; // Icon image for fan (to be changed between green and grey)\nvar fanRing = document.getElementById(\"FanIconRemote\").childNodes[0]; // Outer ring for fan (to be changed between green and grey)\n\n// Define function for when master button is clicked\nmaster.onclick = function() {\n  if (document.getElementById(\"master\").checked === true) {\n    // Switch ON all plug loads if master button is confirmed to be turned ON\n    if (window.confirm(\"You are switching on all your plug loads.\")) {\n      // Switch desktop toggle button to ON\n      document.getElementById(\"DesktopToggleRemote\").checked = true;\n      // Green image should be shown\n      desktopImage.src = \"/static/Images/Desktop ON.png\";\n      // Outer circle should be green\n      desktopRing.classList.remove(\"greyRemote\");\n      desktopRing.classList.add(\"greenRemote\");\n\n      // Switch monitor toggle button to ON\n      document.getElementById(\"MonitorToggleRemote\").checked = true;\n      // Green image should be shown\n      monitorImage.src = \"/static/Images/Monitor ON.png\";\n      // Outer circle should be green\n      monitorRing.classList.remove(\"greyRemote\");\n      monitorRing.classList.add(\"greenRemote\");\n\n      // Switch laptop toggle button to ON\n      document.getElementById(\"LaptopToggleRemote\").checked = true;\n      // Green image should be shown\n      laptopImage.src = \"/static/Images/Laptop ON.png\";\n      // Outer circle should be green\n      laptopRing.classList.remove(\"greyRemote\");\n      laptopRing.classList.add(\"greenRemote\");\n\n      // Switch task lamp toggle button to ON\n      document.getElementById(\"TaskLampToggleRemote\").checked = true;\n      // Green image should be shown\n      tasklampImage.src = \"/static/Images/Task Lamp ON.png\";\n      // Outer circle should be green\n      tasklampRing.classList.remove(\"greyRemote\");\n      tasklampRing.classList.add(\"greenRemote\");\n\n      // Switch fan toggle button to ON\n      document.getElementById(\"FanToggleRemote\").checked = true;\n      // Green image should be shown\n      fanImage.src = \"/static/Images/Fan ON.png\";\n      // Outer circle should be green\n      fanRing.classList.remove(\"greyRemote\");\n      fanRing.classList.add(\"greenRemote\");\n    } else {\n      // Nothing happens if user does not confirm to switch ON all plug loads\n      // Master button remains OFF\n      document.getElementById(\"master\").checked = false;\n    }\n  } else {\n    // Switch OFF all plug loads if master button is confirmed to be turned OFF\n    if (window.confirm(\"You are switching off all your plug loads.\")) {\n      // Switch desktop toggle button to OFF\n      document.getElementById(\"DesktopToggleRemote\").checked = false;\n      // Grey image should be shown\n      desktopImage.src = \"/static/Images/Desktop OFF.png\";\n      // Outer circle should be grey\n      desktopRing.classList.remove(\"greenRemote\");\n      desktopRing.classList.add(\"greyRemote\");\n\n      // Switch monitor toggle button to OFF\n      document.getElementById(\"MonitorToggleRemote\").checked = false;\n      // Grey image should be shown\n      monitorImage.src = \"/static/Images/Monitor OFF.png\";\n      // Outer ring should be grey\n      monitorRing.classList.remove(\"greenRemote\");\n      monitorRing.classList.add(\"greyRemote\");\n\n      // Switch laptop toggle button to OFF\n      document.getElementById(\"LaptopToggleRemote\").checked = false;\n      // Grey image should be shown\n      laptopImage.src = \"/static/Images/Laptop OFF.png\";\n      // Outer ring should be grey\n      laptopRing.classList.remove(\"greenRemote\");\n      laptopRing.classList.add(\"greyRemote\");\n\n      // Switch task lamp toggle button to OFF\n      document.getElementById(\"TaskLampToggleRemote\").checked = false;\n      // Grey image should be shown\n      tasklampImage.src = \"/static/Images/Task Lamp OFF.png\";\n      // Outer ring should be grey\n      tasklampRing.classList.remove(\"greenRemote\");\n      tasklampRing.classList.add(\"greyRemote\");\n\n      // Switch fan toggle button to OFF\n      document.getElementById(\"FanToggleRemote\").checked = false;\n      // Grey image should be shown\n      fanImage.src = \"/static/Images/Fan OFF.png\";\n      // Outer ring should be grey\n      fanRing.classList.remove(\"greenRemote\");\n      fanRing.classList.add(\"greyRemote\");\n    } else {\n      // Nothing happens if user does not confirm to switch OFF all plug loads\n      // Master button remains ON\n      document.getElementById(\"master\").checked = true;\n    }\n  }\n}\n\n\n// Define function for when desktop component is clicked\ndesktop.onclick = function() {\n  // Toggle the switch\n  document.getElementById(\"DesktopToggleRemote\").checked = !document.getElementById(\"DesktopToggleRemote\").checked\n\n  // Get the current state (ON/OFF) of the plug load\n  var current_state = document.getElementById(\"DesktopToggleRemote\").checked\n\n  if (current_state === true) {\n    // If ON, image and outer ring should be green\n    desktopImage.src = \"/static/Images/Desktop ON.png\";\n    desktopRing.classList.remove(\"greyRemote\");\n    desktopRing.classList.add(\"greenRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  } else {\n    // If OFF, image and outer ring should be grey\n    desktopImage.src = \"/static/Images/Desktop OFF.png\";\n    desktopRing.classList.remove(\"greenRemote\");\n    desktopRing.classList.add(\"greyRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  }\n}\n\n// Define function for when monitor component is clicked\nmonitor.onclick = function() {\n  // Toggle the switch\n  document.getElementById(\"MonitorToggleRemote\").checked = !document.getElementById(\"MonitorToggleRemote\").checked\n\n  // Get the current state (ON/OFF) of the plug load\n  var current_state = document.getElementById(\"MonitorToggleRemote\").checked\n\n  if (current_state === true) {\n    // If ON, image and outer ring should be green\n    monitorImage.src = \"/static/Images/Monitor ON.png\";\n    monitorRing.classList.remove(\"greyRemote\");\n    monitorRing.classList.add(\"greenRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  } else {\n    // If OFF, image and outer ring should be grey\n    monitorImage.src = \"/static/Images/Monitor OFF.png\";\n    monitorRing.classList.remove(\"greenRemote\");\n    monitorRing.classList.add(\"greyRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  }\n}\n\n// Define function for when laptop component is clicked\nlaptop.onclick = function() {\n  // Toggle the switch\n  document.getElementById(\"LaptopToggleRemote\").checked = !document.getElementById(\"LaptopToggleRemote\").checked\n\n  // Get the current state (ON/OFF) of the plug load\n  var current_state = document.getElementById(\"LaptopToggleRemote\").checked\n\n  if (current_state === true) {\n    // If ON, image and outer ring should be green\n    laptopImage.src = \"/static/Images/Laptop ON.png\";\n    laptopRing.classList.remove(\"greyRemote\");\n    laptopRing.classList.add(\"greenRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  } else {\n    // If OFF, image and outer ring should be grey\n    laptopImage.src = \"/static/Images/Laptop OFF.png\";\n    laptopRing.classList.remove(\"greenRemote\");\n    laptopRing.classList.add(\"greyRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  }\n}\n\n// Define function for when task lamp component is clicked\ntasklamp.onclick = function() {\n  // Toggle the switch\n  document.getElementById(\"TaskLampToggleRemote\").checked = !document.getElementById(\"TaskLampToggleRemote\").checked\n\n  // Get the current state (ON/OFF) of the plug load\n  var current_state = document.getElementById(\"TaskLampToggleRemote\").checked\n\n  if (current_state === true) {\n    // If ON, image and outer ring should be green\n    tasklampImage.src = \"/static/Images/Task Lamp ON.png\";\n    tasklampRing.classList.remove(\"greyRemote\");\n    tasklampRing.classList.add(\"greenRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  } else {\n    // If OFF, image and outer ring should be grey\n    tasklampImage.src = \"/static/Images/Task Lamp OFF.png\";\n    tasklampRing.classList.remove(\"greenRemote\");\n    tasklampRing.classList.add(\"greyRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  }\n}\n\n// Define the function for when fan component is clicked\nfan.onclick = function() {\n  // Toggle the switch\n  document.getElementById(\"FanToggleRemote\").checked = !document.getElementById(\"FanToggleRemote\").checked\n\n  // Get the current state (ON/OFF) of the plug load\n  var current_state = document.getElementById(\"FanToggleRemote\").checked\n\n  if (current_state === true) {\n    // If ON, image and outer ring should be green\n    fanImage.src = \"/static/Images/Fan ON.png\";\n    fanRing.classList.remove(\"greyRemote\");\n    fanRing.classList.add(\"greenRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  } else {\n    // If OFF, image and outer ring should be grey\n    fanImage.src = \"/static/Images/Fan OFF.png\";\n    fanRing.classList.remove(\"greenRemote\");\n    fanRing.classList.add(\"greyRemote\");\n\n    // If at least one plug load is ON, master button is automatically toggled to ON.\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    Main()\n  }\n}\n\n\nfunction Main() {\n  // If at least one plug load is ON, master button is automatically toggled to ON.\n  if (document.getElementById(\"DesktopToggleRemote\").checked || document.getElementById(\"MonitorToggleRemote\").checked || document.getElementById(\"LaptopToggleRemote\").checked || document.getElementById(\"TaskLampToggleRemote\").checked || document.getElementById(\"FanToggleRemote\").checked) {\n    document.getElementById(\"master\").checked = true;\n  } else {\n    // If all plug loads are OFF, master button is automatically toggled to OFF.\n    if (!document.getElementById(\"DesktopToggleRemote\").checked && !document.getElementById(\"MonitorToggleRemote\").checked && !document.getElementById(\"LaptopToggleRemote\").checked && !document.getElementById(\"TaskLampToggleRemote\").checked && !document.getElementById(\"FanToggleRemote\").checked) {\n      document.getElementById(\"master\").checked = false;\n    }\n  }\n}\n\n// Toggle information box\nvar infoiconremote = document.getElementById(\"infoIconRemote\");\ninfoiconremote.onclick = function() {\n  var element = document.getElementById(\"informationBoxRemote\");\n\n  if (element === null) {\n    ReactDOM.render(\n      <div id=\"informationBoxRemote\">\n        <p> This control feature allows you to manually switch your plug loads ON / OFF wirelessly without having to be physically present at your desk.</p>\n      </div>, document.getElementById('infoBoxRemote'));\n  } else {\n    ReactDOM.unmountComponentAtNode(document.getElementById('infoBoxRemote'));\n  }\n}\n\n"],"sourceRoot":""}